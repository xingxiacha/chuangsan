{"remainingRequest":"F:\\gitee\\chuangsan\\chaoxing\\node_modules\\babel-loader\\lib\\index.js!F:\\gitee\\chuangsan\\chaoxing\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\gitee\\chuangsan\\chaoxing\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\gitee\\chuangsan\\chaoxing\\node_modules\\@jiaminghi\\data-view\\lib\\components\\waterLevelPond\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\gitee\\chuangsan\\chaoxing\\node_modules\\@jiaminghi\\data-view\\lib\\components\\waterLevelPond\\src\\main.vue","mtime":1696499855990},{"path":"F:\\gitee\\chuangsan\\chaoxing\\babel.config.js","mtime":1696499424117},{"path":"F:\\gitee\\chuangsan\\chaoxing\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1696499873500},{"path":"F:\\gitee\\chuangsan\\chaoxing\\node_modules\\babel-loader\\lib\\index.js","mtime":1696499874028},{"path":"F:\\gitee\\chuangsan\\chaoxing\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1696499873500},{"path":"F:\\gitee\\chuangsan\\chaoxing\\node_modules\\vue-loader\\lib\\index.js","mtime":1696499870262}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiRjovZ2l0ZWUvY2h1YW5nc2FuL2NoYW94aW5nL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9yZWdlbmVyYXRvclJ1bnRpbWUuanMiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiRjovZ2l0ZWUvY2h1YW5nc2FuL2NoYW94aW5nL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIjsKaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gIkY6L2dpdGVlL2NodWFuZ3Nhbi9jaGFveGluZy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheS5qcyI7CmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSAiRjovZ2l0ZWUvY2h1YW5nc2FuL2NoYW94aW5nL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWxsLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCgppbXBvcnQgeyB1dWlkIH0gZnJvbSAnLi4vLi4vLi4vdXRpbC9pbmRleCc7CmltcG9ydCB7IGRlZXBNZXJnZSB9IGZyb20gJ0BqaWFtaW5naGkvY2hhcnRzL2xpYi91dGlsL2luZGV4JzsKaW1wb3J0IHsgZGVlcENsb25lIH0gZnJvbSAnQGppYW1pbmdoaS9jLXJlbmRlci9saWIvcGx1Z2luL3V0aWwnOwppbXBvcnQgQ1JlbmRlciBmcm9tICdAamlhbWluZ2hpL2MtcmVuZGVyJzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdEdldhdGVyTGV2ZWxQb25kJywKICBwcm9wczogewogICAgY29uZmlnOiBPYmplY3QsCiAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHsKICAgICAgcmV0dXJuIHt9OwogICAgfQogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHZhciBpZCA9IHV1aWQoKTsKICAgIHJldHVybiB7CiAgICAgIGdyYWRpZW50SWQ6ICJ3YXRlci1sZXZlbC1wb25kLSIuY29uY2F0KGlkKSwKICAgICAgZGVmYXVsdENvbmZpZzogewogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBEYXRhCiAgICAgICAgICogQHR5cGUge0FycmF5PE51bWJlcj59CiAgICAgICAgICogQGRlZmF1bHQgZGF0YSA9IFtdCiAgICAgICAgICogQGV4YW1wbGUgZGF0YSA9IFs2MCwgNDBdCiAgICAgICAgICovCiAgICAgICAgZGF0YTogW10sCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNoYXBlIG9mIHdhbnRlciBsZXZlbCBwb25kCiAgICAgICAgICogQHR5cGUge1N0cmluZ30KICAgICAgICAgKiBAZGVmYXVsdCBzaGFwZSA9ICdyZWN0JwogICAgICAgICAqIEBleGFtcGxlIHNoYXBlID0gJ3JlY3QnIHwgJ3JvdW5kUmVjdCcgfCAncm91bmQnCiAgICAgICAgICovCiAgICAgICAgc2hhcGU6ICdyZWN0JywKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzY3JpcHRpb24gV2F0ZXIgd2F2ZSBudW1iZXIKICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfQogICAgICAgICAqIEBkZWZhdWx0IHdhdmVOdW0gPSAzCiAgICAgICAgICovCiAgICAgICAgd2F2ZU51bTogMywKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzY3JpcHRpb24gV2F0ZXIgd2F2ZSBoZWlnaHQgKHB4KQogICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9CiAgICAgICAgICogQGRlZmF1bHQgd2F2ZUhlaWdodCA9IDQwCiAgICAgICAgICovCiAgICAgICAgd2F2ZUhlaWdodDogNDAsCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIFdhdmUgb3BhY2l0eQogICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9CiAgICAgICAgICogQGRlZmF1bHQgd2F2ZU9wYWNpdHkgPSAwLjQKICAgICAgICAgKi8KICAgICAgICB3YXZlT3BhY2l0eTogMC40LAogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBDb2xvcnMgKGhleHxyZ2J8cmdiYXxjb2xvciBrZXl3b3JkcykKICAgICAgICAgKiBAdHlwZSB7QXJyYXk8U3RyaW5nPn0KICAgICAgICAgKiBAZGVmYXVsdCBjb2xvcnMgPSBbJyMwMEJBRkYnLCAnIzNERTdDOSddCiAgICAgICAgICogQGV4YW1wbGUgY29sb3JzID0gWycjMDAwJywgJ3JnYigwLCAwLCAwKScsICdyZ2JhKDAsIDAsIDAsIDEpJywgJ3JlZCddCiAgICAgICAgICovCiAgICAgICAgY29sb3JzOiBbJyMzREU3QzknLCAnIzAwQkFGRiddLAogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBGb3JtYXR0ZXIKICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICAgICAqIEBkZWZhdWx0IGZvcm1hdHRlciA9ICd7dmFsdWV9JScKICAgICAgICAgKi8KICAgICAgICBmb3JtYXR0ZXI6ICd7dmFsdWV9JScKICAgICAgfSwKICAgICAgbWVyZ2VkQ29uZmlnOiB7fSwKICAgICAgcmVuZGVyZXI6IG51bGwsCiAgICAgIHN2Z0JvcmRlckdyYWRpZW50OiBbXSwKICAgICAgZGV0YWlsczogJycsCiAgICAgIHdhdmVzOiBbXSwKICAgICAgYW5pbWF0aW9uOiBmYWxzZQogICAgfTsKICB9LAogIGNvbXB1dGVkOiB7CiAgICByYWRpdXM6IGZ1bmN0aW9uIHJhZGl1cygpIHsKICAgICAgdmFyIHNoYXBlID0gdGhpcy5tZXJnZWRDb25maWcuc2hhcGU7CiAgICAgIGlmIChzaGFwZSA9PT0gJ3JvdW5kJykgcmV0dXJuICc1MCUnOwogICAgICBpZiAoc2hhcGUgPT09ICdyZWN0JykgcmV0dXJuICcwJzsKICAgICAgaWYgKHNoYXBlID09PSAncm91bmRSZWN0JykgcmV0dXJuICcxMHB4JzsKICAgICAgcmV0dXJuICcwJzsKICAgIH0sCiAgICBzaGFwZTogZnVuY3Rpb24gc2hhcGUoKSB7CiAgICAgIHZhciBzaGFwZSA9IHRoaXMubWVyZ2VkQ29uZmlnLnNoYXBlOwogICAgICBpZiAoIXNoYXBlKSByZXR1cm4gJ3JlY3QnOwogICAgICByZXR1cm4gc2hhcGU7CiAgICB9CiAgfSwKICB3YXRjaDogewogICAgY29uZmlnOiBmdW5jdGlvbiBjb25maWcoKSB7CiAgICAgIHZhciBjYWxjRGF0YSA9IHRoaXMuY2FsY0RhdGEsCiAgICAgICAgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyOwogICAgICByZW5kZXJlci5kZWxBbGxHcmFwaCgpOwogICAgICB0aGlzLndhdmVzID0gW107CiAgICAgIHNldFRpbWVvdXQoY2FsY0RhdGEsIDApOwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHsKICAgICAgdmFyIGluaXRSZW5kZXIgPSB0aGlzLmluaXRSZW5kZXIsCiAgICAgICAgY29uZmlnID0gdGhpcy5jb25maWcsCiAgICAgICAgY2FsY0RhdGEgPSB0aGlzLmNhbGNEYXRhOwogICAgICBpbml0UmVuZGVyKCk7CiAgICAgIGlmICghY29uZmlnKSByZXR1cm47CiAgICAgIGNhbGNEYXRhKCk7CiAgICB9LAogICAgaW5pdFJlbmRlcjogZnVuY3Rpb24gaW5pdFJlbmRlcigpIHsKICAgICAgdmFyICRyZWZzID0gdGhpcy4kcmVmczsKICAgICAgdGhpcy5yZW5kZXJlciA9IG5ldyBDUmVuZGVyKCRyZWZzWyd3YXRlci1wb25kLWxldmVsJ10pOwogICAgfSwKICAgIGNhbGNEYXRhOiBmdW5jdGlvbiBjYWxjRGF0YSgpIHsKICAgICAgdmFyIG1lcmdlQ29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZywKICAgICAgICBjYWxjU3ZnQm9yZGVyR3JhZGllbnQgPSB0aGlzLmNhbGNTdmdCb3JkZXJHcmFkaWVudCwKICAgICAgICBjYWxjRGV0YWlscyA9IHRoaXMuY2FsY0RldGFpbHM7CiAgICAgIG1lcmdlQ29uZmlnKCk7CiAgICAgIGNhbGNTdmdCb3JkZXJHcmFkaWVudCgpOwogICAgICBjYWxjRGV0YWlscygpOwogICAgICB2YXIgYWRkV2F2ZSA9IHRoaXMuYWRkV2F2ZSwKICAgICAgICBhbmltYXRpb25XYXZlID0gdGhpcy5hbmltYXRpb25XYXZlOwogICAgICBhZGRXYXZlKCk7CiAgICAgIGFuaW1hdGlvbldhdmUoKTsKICAgIH0sCiAgICBtZXJnZUNvbmZpZzogZnVuY3Rpb24gbWVyZ2VDb25maWcoKSB7CiAgICAgIHZhciBjb25maWcgPSB0aGlzLmNvbmZpZywKICAgICAgICBkZWZhdWx0Q29uZmlnID0gdGhpcy5kZWZhdWx0Q29uZmlnOwogICAgICB0aGlzLm1lcmdlZENvbmZpZyA9IGRlZXBNZXJnZShkZWVwQ2xvbmUoZGVmYXVsdENvbmZpZywgdHJ1ZSksIGNvbmZpZyk7CiAgICB9LAogICAgY2FsY1N2Z0JvcmRlckdyYWRpZW50OiBmdW5jdGlvbiBjYWxjU3ZnQm9yZGVyR3JhZGllbnQoKSB7CiAgICAgIHZhciBjb2xvcnMgPSB0aGlzLm1lcmdlZENvbmZpZy5jb2xvcnM7CiAgICAgIHZhciBjb2xvck51bSA9IGNvbG9ycy5sZW5ndGg7CiAgICAgIHZhciBjb2xvck9mZnNldEdhcCA9IDEwMCAvIChjb2xvck51bSAtIDEpOwogICAgICB0aGlzLnN2Z0JvcmRlckdyYWRpZW50ID0gY29sb3JzLm1hcChmdW5jdGlvbiAoYywgaSkgewogICAgICAgIHJldHVybiBbY29sb3JPZmZzZXRHYXAgKiBpLCBjXTsKICAgICAgfSk7CiAgICB9LAogICAgY2FsY0RldGFpbHM6IGZ1bmN0aW9uIGNhbGNEZXRhaWxzKCkgewogICAgICB2YXIgX3RoaXMkbWVyZ2VkQ29uZmlnID0gdGhpcy5tZXJnZWRDb25maWcsCiAgICAgICAgZGF0YSA9IF90aGlzJG1lcmdlZENvbmZpZy5kYXRhLAogICAgICAgIGZvcm1hdHRlciA9IF90aGlzJG1lcmdlZENvbmZpZy5mb3JtYXR0ZXI7CiAgICAgIGlmICghZGF0YS5sZW5ndGgpIHsKICAgICAgICB0aGlzLmRldGFpbHMgPSAnJzsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgdmFyIG1heFZhbHVlID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgX3RvQ29uc3VtYWJsZUFycmF5KGRhdGEpKTsKICAgICAgdGhpcy5kZXRhaWxzID0gZm9ybWF0dGVyLnJlcGxhY2UoJ3t2YWx1ZX0nLCBtYXhWYWx1ZSk7CiAgICB9LAogICAgYWRkV2F2ZTogZnVuY3Rpb24gYWRkV2F2ZSgpIHsKICAgICAgdmFyIHJlbmRlcmVyID0gdGhpcy5yZW5kZXJlciwKICAgICAgICBnZXRXYXZlU2hhcGVzID0gdGhpcy5nZXRXYXZlU2hhcGVzLAogICAgICAgIGdldFdhdmVTdHlsZSA9IHRoaXMuZ2V0V2F2ZVN0eWxlLAogICAgICAgIGRyYXdlZCA9IHRoaXMuZHJhd2VkOwogICAgICB2YXIgc2hhcGVzID0gZ2V0V2F2ZVNoYXBlcygpOwogICAgICB2YXIgc3R5bGUgPSBnZXRXYXZlU3R5bGUoKTsKICAgICAgdGhpcy53YXZlcyA9IHNoYXBlcy5tYXAoZnVuY3Rpb24gKHNoYXBlKSB7CiAgICAgICAgcmV0dXJuIHJlbmRlcmVyLmFkZCh7CiAgICAgICAgICBuYW1lOiAnc21vb3RobGluZScsCiAgICAgICAgICBhbmltYXRpb25GcmFtZTogMzAwLAogICAgICAgICAgc2hhcGU6IHNoYXBlLAogICAgICAgICAgc3R5bGU6IHN0eWxlLAogICAgICAgICAgZHJhd2VkOiBkcmF3ZWQKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9LAogICAgZ2V0V2F2ZVNoYXBlczogZnVuY3Rpb24gZ2V0V2F2ZVNoYXBlcygpIHsKICAgICAgdmFyIG1lcmdlZENvbmZpZyA9IHRoaXMubWVyZ2VkQ29uZmlnLAogICAgICAgIHJlbmRlcmVyID0gdGhpcy5yZW5kZXJlciwKICAgICAgICBtZXJnZU9mZnNldCA9IHRoaXMubWVyZ2VPZmZzZXQ7CiAgICAgIHZhciB3YXZlTnVtID0gbWVyZ2VkQ29uZmlnLndhdmVOdW0sCiAgICAgICAgd2F2ZUhlaWdodCA9IG1lcmdlZENvbmZpZy53YXZlSGVpZ2h0LAogICAgICAgIGRhdGEgPSBtZXJnZWRDb25maWcuZGF0YTsKICAgICAgdmFyIF9yZW5kZXJlciRhcmVhID0gX3NsaWNlZFRvQXJyYXkocmVuZGVyZXIuYXJlYSwgMiksCiAgICAgICAgdyA9IF9yZW5kZXJlciRhcmVhWzBdLAogICAgICAgIGggPSBfcmVuZGVyZXIkYXJlYVsxXTsKICAgICAgdmFyIHBvaW50c051bSA9IHdhdmVOdW0gKiA0ICsgNDsKICAgICAgdmFyIHBvaW50WEdhcCA9IHcgLyB3YXZlTnVtIC8gMjsKICAgICAgcmV0dXJuIGRhdGEubWFwKGZ1bmN0aW9uICh2KSB7CiAgICAgICAgdmFyIHBvaW50cyA9IG5ldyBBcnJheShwb2ludHNOdW0pLmZpbGwoMCkubWFwKGZ1bmN0aW9uIChmb28sIGopIHsKICAgICAgICAgIHZhciB4ID0gdyAtIHBvaW50WEdhcCAqIGo7CiAgICAgICAgICB2YXIgc3RhcnRZID0gKDEgLSB2IC8gMTAwKSAqIGg7CiAgICAgICAgICB2YXIgeSA9IGogJSAyID09PSAwID8gc3RhcnRZIDogc3RhcnRZIC0gd2F2ZUhlaWdodDsKICAgICAgICAgIHJldHVybiBbeCwgeV07CiAgICAgICAgfSk7CiAgICAgICAgcG9pbnRzID0gcG9pbnRzLm1hcChmdW5jdGlvbiAocCkgewogICAgICAgICAgcmV0dXJuIG1lcmdlT2Zmc2V0KHAsIFtwb2ludFhHYXAgKiAyLCAwXSk7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIHBvaW50czogcG9pbnRzCiAgICAgICAgfTsKICAgICAgfSk7CiAgICB9LAogICAgbWVyZ2VPZmZzZXQ6IGZ1bmN0aW9uIG1lcmdlT2Zmc2V0KF9yZWYsIF9yZWYyKSB7CiAgICAgIHZhciBfcmVmMyA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpLAogICAgICAgIHggPSBfcmVmM1swXSwKICAgICAgICB5ID0gX3JlZjNbMV07CiAgICAgIHZhciBfcmVmNCA9IF9zbGljZWRUb0FycmF5KF9yZWYyLCAyKSwKICAgICAgICBveCA9IF9yZWY0WzBdLAogICAgICAgIG95ID0gX3JlZjRbMV07CiAgICAgIHJldHVybiBbeCArIG94LCB5ICsgb3ldOwogICAgfSwKICAgIGdldFdhdmVTdHlsZTogZnVuY3Rpb24gZ2V0V2F2ZVN0eWxlKCkgewogICAgICB2YXIgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyLAogICAgICAgIG1lcmdlZENvbmZpZyA9IHRoaXMubWVyZ2VkQ29uZmlnOwogICAgICB2YXIgaCA9IHJlbmRlcmVyLmFyZWFbMV07CiAgICAgIHJldHVybiB7CiAgICAgICAgZ3JhZGllbnRDb2xvcjogbWVyZ2VkQ29uZmlnLmNvbG9ycywKICAgICAgICBncmFkaWVudFR5cGU6ICdsaW5lYXInLAogICAgICAgIGdyYWRpZW50UGFyYW1zOiBbMCwgMCwgMCwgaF0sCiAgICAgICAgZ3JhZGllbnRXaXRoOiAnZmlsbCcsCiAgICAgICAgb3BhY2l0eTogbWVyZ2VkQ29uZmlnLndhdmVPcGFjaXR5LAogICAgICAgIHRyYW5zbGF0ZTogWzAsIDBdCiAgICAgIH07CiAgICB9LAogICAgZHJhd2VkOiBmdW5jdGlvbiBkcmF3ZWQoX3JlZjUsIF9yZWY2KSB7CiAgICAgIHZhciBwb2ludHMgPSBfcmVmNS5zaGFwZS5wb2ludHM7CiAgICAgIHZhciBjdHggPSBfcmVmNi5jdHgsCiAgICAgICAgYXJlYSA9IF9yZWY2LmFyZWE7CiAgICAgIHZhciBmaXJzdFBvaW50ID0gcG9pbnRzWzBdOwogICAgICB2YXIgbGFzdFBvaW50ID0gcG9pbnRzLnNsaWNlKC0xKVswXTsKICAgICAgdmFyIGggPSBhcmVhWzFdOwogICAgICBjdHgubGluZVRvKGxhc3RQb2ludFswXSwgaCk7CiAgICAgIGN0eC5saW5lVG8oZmlyc3RQb2ludFswXSwgaCk7CiAgICAgIGN0eC5jbG9zZVBhdGgoKTsKICAgICAgY3R4LmZpbGwoKTsKICAgIH0sCiAgICBhbmltYXRpb25XYXZlOiBmdW5jdGlvbiBhbmltYXRpb25XYXZlKCkgewogICAgICB2YXIgX2FyZ3VtZW50cyA9IGFyZ3VtZW50cywKICAgICAgICBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIHJlcGVhdCwgd2F2ZXMsIHJlbmRlcmVyLCBhbmltYXRpb24sIHc7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgcmVwZWF0ID0gX2FyZ3VtZW50cy5sZW5ndGggPiAwICYmIF9hcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IF9hcmd1bWVudHNbMF0gOiAxOwogICAgICAgICAgICAgIHdhdmVzID0gX3RoaXMud2F2ZXMsIHJlbmRlcmVyID0gX3RoaXMucmVuZGVyZXIsIGFuaW1hdGlvbiA9IF90aGlzLmFuaW1hdGlvbjsKICAgICAgICAgICAgICBpZiAoIWFuaW1hdGlvbikgewogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIik7CiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICBfdGhpcy5hbmltYXRpb24gPSB0cnVlOwogICAgICAgICAgICAgIHcgPSByZW5kZXJlci5hcmVhWzBdOwogICAgICAgICAgICAgIHdhdmVzLmZvckVhY2goZnVuY3Rpb24gKGdyYXBoKSB7CiAgICAgICAgICAgICAgICBncmFwaC5hdHRyKCdzdHlsZScsIHsKICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlOiBbMCwgMF0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgZ3JhcGguYW5pbWF0aW9uKCdzdHlsZScsIHsKICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlOiBbdywgMF0KICAgICAgICAgICAgICAgIH0sIHRydWUpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA5OwogICAgICAgICAgICAgIHJldHVybiByZW5kZXJlci5sYXVuY2hBbmltYXRpb24oKTsKICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgIF90aGlzLmFuaW1hdGlvbiA9IGZhbHNlOwogICAgICAgICAgICAgIGlmIChyZW5kZXJlci5ncmFwaHMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIik7CiAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgX3RoaXMuYW5pbWF0aW9uV2F2ZShyZXBlYXQgKyAxKTsKICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSkoKTsKICAgIH0KICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB2YXIgaW5pdCA9IHRoaXMuaW5pdDsKICAgIGluaXQoKTsKICB9LAogIGJlZm9yZURlc3Ryb3k6IGZ1bmN0aW9uIGJlZm9yZURlc3Ryb3koKSB7CiAgICB2YXIgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyOwogICAgcmVuZGVyZXIuZGVsQWxsR3JhcGgoKTsKICAgIHRoaXMud2F2ZXMgPSBbXTsKICB9Cn07"},{"version":3,"names":["uuid","deepMerge","deepClone","CRender","name","props","config","Object","default","_default","data","id","gradientId","concat","defaultConfig","shape","waveNum","waveHeight","waveOpacity","colors","formatter","mergedConfig","renderer","svgBorderGradient","details","waves","animation","computed","radius","watch","calcData","delAllGraph","setTimeout","methods","init","initRender","$refs","mergeConfig","calcSvgBorderGradient","calcDetails","addWave","animationWave","colorNum","length","colorOffsetGap","map","c","i","_this$mergedConfig","maxValue","Math","max","apply","_toConsumableArray","replace","getWaveShapes","getWaveStyle","drawed","shapes","style","add","animationFrame","mergeOffset","_renderer$area","_slicedToArray","area","w","h","pointsNum","pointXGap","v","points","Array","fill","foo","j","x","startY","y","p","_ref","_ref2","_ref3","_ref4","ox","oy","gradientColor","gradientType","gradientParams","gradientWith","opacity","translate","_ref5","_ref6","ctx","firstPoint","lastPoint","slice","lineTo","closePath","_arguments","arguments","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","repeat","wrap","_callee$","_context","prev","next","undefined","abrupt","forEach","graph","attr","launchAnimation","graphs","stop","mounted","beforeDestroy"],"sources":["node_modules/@jiaminghi/data-view/lib/components/waterLevelPond/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-water-pond-level\">\n    <svg v-if=\"renderer\">\n      <defs>\n        <linearGradient :id=\"gradientId\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n          <stop v-for=\"lc in svgBorderGradient\" :key=\"lc[0]\"\n            :offset=\"lc[0]\"\n            :stop-color=\"lc[1]\" />\n        </linearGradient>\n      </defs>\n\n      <text\n        v-if=\"renderer\"\n        :stroke=\"`url(#${gradientId})`\"\n        :fill=\"`url(#${gradientId})`\"\n        :x=\"renderer.area[0] / 2 + 8\"\n        :y=\"renderer.area[1] / 2 + 8\"\n      >\n        {{ details }}\n      </text>\n\n      <ellipse v-if=\"!shape || shape === 'round'\"\n        :cx=\"renderer.area[0] / 2 + 8\"\n        :cy=\"renderer.area[1] / 2 + 8\"\n        :rx=\"renderer.area[0] / 2 + 5\"\n        :ry=\"renderer.area[1] / 2 + 5\"\n        :stroke=\"`url(#${gradientId})`\" />\n\n      <rect v-else\n        x=\"2\" y=\"2\"\n        :rx=\"shape === 'roundRect' ? 10 : 0\"\n        :ry=\"shape === 'roundRect' ? 10 : 0\"\n        :width=\"renderer.area[0] + 12\"\n        :height=\"renderer.area[1] + 12\"\n        :stroke=\"`url(#${gradientId})`\" />\n    </svg>\n\n    <canvas ref=\"water-pond-level\" :style=\"`border-radius: ${radius};`\" />\n  </div>\n</template>\n\n<script>\nimport { uuid } from '../../../util/index'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nimport CRender from '@jiaminghi/c-render'\n\nexport default {\n  name: 'DvWaterLevelPond',\n  props: {\n    config: Object,\n    default: () => ({})\n  },\n  data () {\n    const id = uuid()\n    return {\n      gradientId: `water-level-pond-${id}`,\n\n      defaultConfig: {\n        /**\n         * @description Data\n         * @type {Array<Number>}\n         * @default data = []\n         * @example data = [60, 40]\n         */\n        data: [],\n        /**\n         * @description Shape of wanter level pond\n         * @type {String}\n         * @default shape = 'rect'\n         * @example shape = 'rect' | 'roundRect' | 'round'\n         */\n        shape: 'rect',\n        /**\n         * @description Water wave number\n         * @type {Number}\n         * @default waveNum = 3\n         */\n        waveNum: 3,\n        /**\n         * @description Water wave height (px)\n         * @type {Number}\n         * @default waveHeight = 40\n         */\n        waveHeight: 40,\n        /**\n         * @description Wave opacity\n         * @type {Number}\n         * @default waveOpacity = 0.4\n         */\n        waveOpacity: 0.4,\n        /**\n         * @description Colors (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default colors = ['#00BAFF', '#3DE7C9']\n         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        colors: ['#3DE7C9', '#00BAFF'],\n        /**\n         * @description Formatter\n         * @type {String}\n         * @default formatter = '{value}%'\n         */\n        formatter: '{value}%'\n      },\n\n      mergedConfig: {},\n\n      renderer: null,\n\n      svgBorderGradient: [],\n\n      details: '',\n\n      waves: [],\n\n      animation: false\n    }\n  },\n  computed: {\n    radius () {\n      const { shape } = this.mergedConfig\n\n      if (shape === 'round') return '50%'\n\n      if (shape === 'rect') return '0'\n\n      if (shape === 'roundRect') return '10px'\n\n      return '0'\n    },\n    shape () {\n      const { shape } = this.mergedConfig\n\n      if (!shape) return 'rect'\n\n      return shape\n    }\n  },\n  watch: {\n    config () {\n      const { calcData, renderer } = this\n\n      renderer.delAllGraph()\n\n      this.waves = []\n\n      setTimeout(calcData, 0)\n    }\n  },\n  methods: {\n    init () {\n      const { initRender, config, calcData } = this\n\n      initRender()\n\n      if (!config) return\n\n      calcData()\n    },\n    initRender () {\n      const { $refs } = this\n\n      this.renderer = new CRender($refs['water-pond-level'])\n    },\n    calcData () {\n      const { mergeConfig, calcSvgBorderGradient, calcDetails } = this\n\n      mergeConfig()\n\n      calcSvgBorderGradient()\n\n      calcDetails()\n\n      const { addWave, animationWave } = this\n\n      addWave()\n\n      animationWave()\n    },\n    mergeConfig () {\n      const { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config)\n    },\n    calcSvgBorderGradient () {\n      const { colors } = this.mergedConfig\n\n      const colorNum = colors.length\n\n      const colorOffsetGap = 100 / (colorNum - 1)\n\n      this.svgBorderGradient = colors.map((c, i) => [colorOffsetGap * i, c])\n    },\n    calcDetails () {\n      const { data, formatter } = this.mergedConfig\n\n      if (!data.length) {\n        this.details = ''\n\n        return\n      }\n\n      const maxValue = Math.max(...data)\n\n      this.details = formatter.replace('{value}', maxValue)\n    },\n    addWave () {\n      const { renderer, getWaveShapes, getWaveStyle, drawed } = this\n\n      const shapes = getWaveShapes()\n      const style = getWaveStyle()\n\n      this.waves = shapes.map(shape => renderer.add({\n        name: 'smoothline',\n        animationFrame: 300,\n        shape,\n        style,\n        drawed\n      }))\n    },\n    getWaveShapes () {\n      const { mergedConfig, renderer, mergeOffset } = this\n\n      const { waveNum, waveHeight, data } = mergedConfig\n\n      const [w, h] = renderer.area\n\n      const pointsNum = waveNum * 4 + 4\n\n      const pointXGap = w / waveNum / 2\n\n      return data.map(v => {\n        let points = new Array(pointsNum).fill(0).map((foo, j) => {\n          const x = w - pointXGap * j\n\n          const startY = (1 - v / 100) * h\n\n          const y = j % 2 === 0 ? startY : startY - waveHeight\n\n          return [x, y]\n        })\n\n        points = points.map(p => mergeOffset(p, [pointXGap * 2, 0]))\n\n        return { points }\n      })\n    },\n    mergeOffset ([x, y], [ox, oy]) {\n      return [x + ox, y + oy]\n    },\n    getWaveStyle () {\n      const { renderer, mergedConfig } = this\n\n      const h = renderer.area[1]\n\n      return {\n        gradientColor: mergedConfig.colors,\n        gradientType: 'linear',\n        gradientParams: [0, 0, 0, h],\n        gradientWith: 'fill',\n        opacity: mergedConfig.waveOpacity,\n        translate: [0, 0]\n      }\n    },\n    drawed ({ shape: { points } }, { ctx, area }) {\n      const firstPoint = points[0]\n      const lastPoint = points.slice(-1)[0]\n\n      const h = area[1]\n\n      ctx.lineTo(lastPoint[0], h)\n      ctx.lineTo(firstPoint[0], h)\n\n      ctx.closePath()\n\n      ctx.fill()\n    },\n    async animationWave (repeat = 1) {\n      const { waves, renderer, animation } = this\n\n      if (animation) return\n\n      this.animation = true\n\n      const w = renderer.area[0]\n\n      waves.forEach(graph => {\n        graph.attr('style', { translate: [0, 0] })\n\n        graph.animation('style', {\n          translate: [w, 0]\n        }, true)\n      })\n\n      await renderer.launchAnimation()\n\n      this.animation = false\n\n      if (!renderer.graphs.length) return\n\n      this.animationWave(repeat + 1)\n    }\n  },\n  mounted () {\n    const { init } = this\n\n    init()\n  },\n  beforeDestroy () {\n    const { renderer } = this\n\n    renderer.delAllGraph()\n\n    this.waves = []\n  }\n}\n</script>"],"mappings":"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"}]}