{"remainingRequest":"F:\\githubpagetest\\chaoxing\\node_modules\\thread-loader\\dist\\cjs.js!F:\\githubpagetest\\chaoxing\\node_modules\\babel-loader\\lib\\index.js!F:\\githubpagetest\\chaoxing\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\githubpagetest\\chaoxing\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\githubpagetest\\chaoxing\\node_modules\\@jiaminghi\\data-view\\lib\\components\\waterLevelPond\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\githubpagetest\\chaoxing\\node_modules\\@jiaminghi\\data-view\\lib\\components\\waterLevelPond\\src\\main.vue","mtime":1701167735823},{"path":"F:\\githubpagetest\\chaoxing\\babel.config.js","mtime":1701167733378},{"path":"F:\\githubpagetest\\chaoxing\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1701167738226},{"path":"F:\\githubpagetest\\chaoxing\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1701167754312},{"path":"F:\\githubpagetest\\chaoxing\\node_modules\\babel-loader\\lib\\index.js","mtime":1701167737017},{"path":"F:\\githubpagetest\\chaoxing\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1701167738226},{"path":"F:\\githubpagetest\\chaoxing\\node_modules\\vue-loader\\lib\\index.js","mtime":1701167758608}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}