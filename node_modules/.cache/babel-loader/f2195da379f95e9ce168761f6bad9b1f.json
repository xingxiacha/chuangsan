{"remainingRequest":"F:\\githubpagetest\\chaoxing\\node_modules\\babel-loader\\lib\\index.js!F:\\githubpagetest\\chaoxing\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\githubpagetest\\chaoxing\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\githubpagetest\\chaoxing\\node_modules\\@jiaminghi\\data-view\\lib\\components\\flylineChartEnhanced\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\githubpagetest\\chaoxing\\node_modules\\@jiaminghi\\data-view\\lib\\components\\flylineChartEnhanced\\src\\main.vue","mtime":1696499855969},{"path":"F:\\githubpagetest\\chaoxing\\babel.config.js","mtime":1696499424117},{"path":"F:\\githubpagetest\\chaoxing\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1696499873500},{"path":"F:\\githubpagetest\\chaoxing\\node_modules\\babel-loader\\lib\\index.js","mtime":1696499874028},{"path":"F:\\githubpagetest\\chaoxing\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1696499873500},{"path":"F:\\githubpagetest\\chaoxing\\node_modules\\vue-loader\\lib\\index.js","mtime":1696499870262}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["deepMerge","deepClone","randomExtend","getPointDistance","uuid","autoResize","name","mixins","props","config","type","Object","default","_default","dev","Boolean","data","id","ref","unique","Math","random","flylineGradientId","concat","haloGradientId","defaultConfig","points","lines","halo","show","duration","color","radius","text","offset","fontSize","icon","src","width","height","line","orbitColor","bgImgSrc","k","curvature","relative","flylines","flylineLengths","flylinePoints","mergedConfig","watch","calcData","methods","afterAutoResizeMixinInit","onResize","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","mergeConfig","calcflylinePoints","calcLinePaths","calcLineLengths","wrap","_callee$","_context","prev","next","stop","map","item","i","_item$coordinate","_slicedToArray","coordinate","x","y","time","apply","_toConsumableArray","iw","ih","_text$offset","ox","oy","key","toString","getPath","source","target","sourcePoint","find","_ref","targetPoint","_ref2","path","v","parseFloat","toFixed","d","_objectSpread","start","end","getControlPoint","controlPoint","_ref3","_ref4","_ref5","sx","sy","_ref6","ex","ey","getKLinePointByx","mx","my","distance","targetLength","disDived","dx","dy","_ref7","_ref8","lx","ly","_this2","_callee2","$nextTick","$refs","_callee2$","_context2","_ref9","getTotalLength","consoleClickPos","_ref10","offsetX","offsetY","relativeX","relativeY","console","warn"],"sources":["node_modules/@jiaminghi/data-view/lib/components/flylineChartEnhanced/src/main.vue"],"sourcesContent":["<template>\n  <div\n    class=\"dv-flyline-chart-enhanced\"\n    :style=\"`background-image: url(${mergedConfig ? mergedConfig.bgImgSrc : ''})`\"\n    :ref=\"ref\"\n    @click=\"consoleClickPos\"\n  >\n    <svg v-if=\"flylines.length\" :width=\"width\" :height=\"height\">\n      <defs>\n        <radialGradient\n          :id=\"flylineGradientId\"\n          cx=\"50%\" cy=\"50%\" r=\"50%\"\n        >\n          <stop\n            offset=\"0%\" stop-color=\"#fff\"\n            stop-opacity=\"1\"\n          />\n          <stop\n            offset=\"100%\" stop-color=\"#fff\"\n            stop-opacity=\"0\"\n          />\n        </radialGradient>\n\n        <radialGradient\n          :id=\"haloGradientId\"\n          cx=\"50%\" cy=\"50%\" r=\"50%\"\n        >\n          <stop\n            offset=\"0%\" stop-color=\"#fff\"\n            stop-opacity=\"0\"\n          />\n          <stop\n            offset=\"100%\" stop-color=\"#fff\"\n            stop-opacity=\"1\"\n          />\n        </radialGradient>\n      </defs>\n\n      <!-- points -->\n      <g v-for=\"point in flylinePoints\" :key=\"point.key + Math.random()\">\n        <defs>\n          <circle\n            v-if=\"point.halo.show\"\n            :id=\"`halo${unique}${point.key}`\"\n            :cx=\"point.coordinate[0]\"\n            :cy=\"point.coordinate[1]\"\n          >\n            <animate\n              attributeName=\"r\"\n              :values=\"`1;${point.halo.radius}`\"\n              :dur=\"`${point.halo.time}s`\"\n              repeatCount=\"indefinite\"\n            />\n            <animate\n              attributeName=\"opacity\"\n              values=\"1;0\"\n              :dur=\"`${point.halo.time}s`\"\n              repeatCount=\"indefinite\"\n            />\n          </circle>\n        </defs>\n\n        <!-- halo gradient mask -->\n        <mask :id=\"`mask${unique}${point.key}`\">\n          <use\n            v-if=\"point.halo.show\"\n            :xlink:href=\"`#halo${unique}${point.key}`\"\n            :fill=\"`url(#${haloGradientId})`\"\n          />\n        </mask>\n\n        <!-- point halo -->\n        <use\n          v-if=\"point.halo.show\"\n          :xlink:href=\"`#halo${unique}${point.key}`\"\n          :fill=\"point.halo.color\"\n          :mask=\"`url(#mask${unique}${point.key})`\"\n        />\n\n        <!-- point icon -->\n        <image\n          v-if=\"point.icon.show\"\n          :xlink:href=\"point.icon.src\"\n          :width=\"point.icon.width\"\n          :height=\"point.icon.height\"\n          :x=\"point.icon.x\"\n          :y=\"point.icon.y\"\n        />\n\n        <!-- point text -->\n        <text\n          v-if=\"point.text.show\"\n          :style=\"`fontSize:${point.text.fontSize}px;color:${point.text.color}`\"\n          :fill=\"point.text.color\"\n          :x=\"point.text.x\"\n          :y=\"point.text.y\"\n        >\n          {{ point.name }}\n        </text>\n      </g>\n\n      <!-- flylines -->\n      <g v-for=\"(line, i) in flylines\" :key=\"line.key + Math.random()\">\n        <defs>\n          <path\n            :id=\"line.key\"\n            :ref=\"line.key\"\n            :d=\"line.d\"\n            fill=\"transparent\"\n          />\n        </defs>\n\n        <!-- orbit line -->\n        <use\n          :xlink:href=\"`#${line.key}`\"\n          :stroke-width=\"line.width\"\n          :stroke=\"line.orbitColor\"\n        />\n\n        <!-- fly line gradient mask -->\n        <mask :id=\"`mask${unique}${line.key}`\">\n          <circle cx=\"0\" cy=\"0\" :r=\"line.radius\" :fill=\"`url(#${flylineGradientId})`\">\n            <animateMotion\n              :dur=\"line.time\"\n              :path=\"line.d\"\n              rotate=\"auto\"\n              repeatCount=\"indefinite\"\n            />\n          </circle>\n        </mask>\n\n        <!-- fly line -->\n        <use\n          v-if=\"flylineLengths[i]\"\n          :xlink:href=\"`#${line.key}`\"\n          :stroke-width=\"line.width\"\n          :stroke=\"line.color\"\n          :mask=\"`url(#mask${unique}${line.key})`\"\n        >\n          <animate\n            attributeName=\"stroke-dasharray\"\n            :from=\"`0, ${flylineLengths[i]}`\"\n            :to=\"`${flylineLengths[i]}, 0`\"\n            :dur=\"line.time\"\n            repeatCount=\"indefinite\"\n          />\n        </use>\n      </g>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nimport { randomExtend, getPointDistance, uuid } from '../../../util/index'\n\nimport autoResize from '../../../mixin/autoResize'\n\nexport default {\n  name: 'DvFlylineChartEnhanced',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    },\n    dev: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data () {\n    const id = uuid()\n    return {\n      ref: 'dv-flyline-chart-enhanced',\n      unique: Math.random(),\n      flylineGradientId: `flyline-gradient-id-${id}`,\n      haloGradientId: `halo-gradient-id-${id}`,\n      /**\n       * @description Type Declaration\n       * \n       * interface Halo {\n       *    show?: boolean\n       *    duration?: [number, number]\n       *    color?: string\n       *    radius?: number\n       * }\n       * \n       * interface Text {\n       *    show?: boolean\n       *    offset?: [number, number]\n       *    color?: string\n       *    fontSize?: number\n       * }\n       * \n       * interface Icon {\n       *    show?: boolean\n       *    src?: string\n       *    width?: number\n       *    height?: number\n       * }\n       * \n       * interface Point {\n       *    name: string\n       *    coordinate: [number, number]\n       *    halo?: Halo\n       *    text?: Text\n       *    icon?: Icon\n       * }\n       * \n       * interface Line {\n       *    width?: number\n       *    color?: string\n       *    orbitColor?: string\n       *    duration?: [number, number]\n       *    radius?: string\n       * }\n       * \n       * interface Flyline extends Line {\n       *    source: string\n       *    target: string\n       * }\n       * \n       * interface FlylineWithPath extends Flyline {\n       *    d: string\n       *    path: [[number, number], [number, number], [number, number]]\n       *    key: string\n       * }\n       */\n      defaultConfig: {\n        /**\n         * @description Flyline chart points\n         * @type {Point[]}\n         * @default points = []\n         */\n        points: [],\n        /**\n         * @description Lines\n         * @type {Flyline[]}\n         * @default lines = []\n         */\n        lines: [],\n        /**\n         * @description Global halo configuration\n         * @type {Halo}\n         */\n        halo: {\n          /**\n           * @description Whether to show halo\n           * @type {Boolean}\n           * @default show = false\n           */\n          show: false,\n          /**\n           * @description Halo animation duration (1s = 10)\n           * @type {[number, number]}\n           */\n          duration: [20, 30],\n          /**\n           * @description Halo color\n           * @type {String}\n           * @default color = '#fb7293'\n           */\n          color: '#fb7293',\n          /**\n           * @description Halo radius\n           * @type {Number}\n           * @default radius = 120\n           */\n          radius: 120\n        },\n        /**\n         * @description Global text configuration\n         * @type {Text}\n         */\n        text: {\n          /**\n           * @description Whether to show text\n           * @type {Boolean}\n           * @default show = false\n           */\n          show: false,\n          /**\n           * @description Text offset\n           * @type {[number, number]}\n           * @default offset = [0, 15]\n           */\n          offset: [0, 15],\n          /**\n           * @description Text color\n           * @type {String}\n           * @default color = '#ffdb5c'\n           */\n          color: '#ffdb5c',\n          /**\n           * @description Text font size\n           * @type {Number}\n           * @default fontSize = 12\n           */\n          fontSize: 12\n        },\n        /**\n         * @description Global icon configuration\n         * @type {Icon}\n         */\n        icon: {\n          /**\n           * @description Whether to show icon\n           * @type {Boolean}\n           * @default show = false\n           */\n          show: false,\n          /**\n           * @description Icon src\n           * @type {String}\n           * @default src = ''\n           */\n          src: '',\n          /**\n           * @description Icon width\n           * @type {Number}\n           * @default width = 15\n           */\n          width: 15,\n          /**\n           * @description Icon height\n           * @type {Number}\n           * @default width = 15\n           */\n          height: 15\n        },\n        /**\n         * @description Global line configuration\n         * @type {Line}\n         */\n        line: {\n          /**\n           * @description Line width\n           * @type {Number}\n           * @default width = 1\n           */\n          width: 1,\n          /**\n           * @description Flyline color\n           * @type {String}\n           * @default color = '#ffde93'\n           */\n          color: '#ffde93',\n          /**\n           * @description Orbit color\n           * @type {String}\n           * @default orbitColor = 'rgba(103, 224, 227, .2)'\n           */\n          orbitColor: 'rgba(103, 224, 227, .2)',\n          /**\n           * @description Flyline animation duration\n           * @type {[number, number]}\n           * @default duration = [20, 30]\n           */\n          duration: [20, 30],\n          /**\n           * @description Flyline radius\n           * @type {Number}\n           * @default radius = 100\n           */\n          radius: 100\n        },\n        /**\n         * @description Back ground image url\n         * @type {String}\n         * @default bgImgSrc = ''\n         */\n        bgImgSrc: '',\n        /**\n         * @description K value\n         * @type {Number}\n         * @default k = -0.5\n         * @example k = -1 ~ 1\n         */\n        k: -0.5,\n        /**\n         * @description Flyline curvature\n         * @type {Number}\n         * @default curvature = 5\n         */\n        curvature: 5,\n        /**\n         * @description Relative points position\n         * @type {Boolean}\n         * @default relative = true\n         */\n        relative: true\n      },\n      /**\n       * @description Fly line data\n       * @type {FlylineWithPath[]}\n       * @default flylines = []\n       */\n      flylines: [],\n      /**\n       * @description Fly line lengths\n       * @type {Number[]}\n       * @default flylineLengths = []\n       */\n      flylineLengths: [],\n      /**\n       * @description Fly line points\n       * @default flylinePoints = []\n       */\n      flylinePoints: [],\n\n      mergedConfig: null\n    }\n  },\n  watch: {\n    config () {\n      const { calcData } = this\n\n      calcData()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcData } = this\n\n      calcData()\n    },\n    onResize () {\n      const { calcData } = this\n\n      calcData()\n    },\n    async calcData () {\n      const { mergeConfig, calcflylinePoints, calcLinePaths } = this\n\n      mergeConfig()\n\n      calcflylinePoints()\n\n      calcLinePaths()\n\n      const { calcLineLengths } = this\n\n      await calcLineLengths()\n    },\n    mergeConfig () {\n      let { config, defaultConfig } = this\n\n      const mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n\n      const { points, lines, halo, text, icon, line } = mergedConfig\n\n      mergedConfig.points = points.map(item => {\n        item.halo = deepMerge(deepClone(halo, true), item.halo || {})\n        item.text = deepMerge(deepClone(text, true), item.text || {})\n        item.icon = deepMerge(deepClone(icon, true), item.icon || {})\n\n        return item\n      })\n\n      mergedConfig.lines = lines.map(item => {\n        return deepMerge(deepClone(line, true), item)\n      })\n\n      this.mergedConfig = mergedConfig\n    },\n    calcflylinePoints () {\n      const { mergedConfig, width, height } = this\n\n      const { relative, points } = mergedConfig\n\n      this.flylinePoints = points.map((item, i) => {\n        const { coordinate: [x, y], halo, icon, text } = item\n\n        if (relative) item.coordinate = [x * width, y * height]\n\n        item.halo.time = randomExtend(...halo.duration) / 10\n\n        const { width: iw, height: ih } = icon\n        item.icon.x = item.coordinate[0] - iw / 2\n        item.icon.y = item.coordinate[1] - ih / 2\n\n        const [ox, oy] = text.offset\n        item.text.x = item.coordinate[0] + ox\n        item.text.y = item.coordinate[1] + oy\n\n        item.key = `${item.coordinate.toString()}${i}`\n\n        return item\n      })\n    },\n    calcLinePaths () {\n      const { getPath, mergedConfig } = this\n\n      const { points, lines } = mergedConfig\n\n      this.flylines = lines.map(item => {\n        const { source, target, duration } = item\n\n        const sourcePoint = points.find(({ name }) => name === source).coordinate\n        const targetPoint = points.find(({ name }) => name === target).coordinate\n\n        const path = getPath(sourcePoint, targetPoint).map(item => item.map(v => parseFloat(v.toFixed(10))))\n        const d = `M${path[0].toString()} Q${path[1].toString()} ${path[2].toString()}`\n        const key = `path${path.toString()}`\n        const time = randomExtend(...duration) / 10\n\n        return { ...item, path, key, d, time }\n      })\n    },\n    getPath (start, end) {\n      const { getControlPoint } = this\n\n      const controlPoint = getControlPoint(start, end)\n\n      return [start, controlPoint, end]\n    },\n    getControlPoint ([sx, sy], [ex, ey]) {\n      const { getKLinePointByx, mergedConfig } = this\n\n      const { curvature, k } = mergedConfig\n\n      const [mx, my] = [(sx + ex) / 2, (sy + ey) / 2]\n\n      const distance = getPointDistance([sx, sy], [ex, ey])\n\n      const targetLength = distance / curvature\n      const disDived = targetLength / 2\n\n      let [dx, dy] = [mx, my]\n\n      do {\n        dx += disDived\n        dy = getKLinePointByx(k, [mx, my], dx)[1]\n      } while (getPointDistance([mx, my], [dx, dy]) < targetLength)\n\n      return [dx, dy]\n    },\n    getKLinePointByx (k, [lx, ly], x) {\n      const y = ly - k * lx + k * x\n\n      return [x, y]\n    },\n    async calcLineLengths () {\n      const { $nextTick, flylines, $refs } = this\n\n      await $nextTick()\n\n      this.flylineLengths = flylines.map(({ key }) => $refs[key][0].getTotalLength())\n    },\n    consoleClickPos ({ offsetX, offsetY }) {\n      const { width, height, dev } = this\n\n      if (!dev) return\n\n      const relativeX = (offsetX / width).toFixed(2)\n      const relativeY = (offsetY / height).toFixed(2)\n\n      console.warn(`dv-flyline-chart-enhanced DEV: \\n Click Position is [${offsetX}, ${offsetY}] \\n Relative Position is [${relativeX}, ${relativeY}]`)\n    }\n  }\n}\n</script>"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyJA,SAAAA,SAAA;AAEA,SAAAC,SAAA;AAEA,SAAAC,YAAA,EAAAC,gBAAA,EAAAC,IAAA;AAEA,OAAAC,UAAA;AAEA;EACAC,IAAA;EACAC,MAAA,GAAAF,UAAA;EACAG,KAAA;IACAC,MAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,OAAA,WAAAC,SAAA;QAAA;MAAA;IACA;IACAC,GAAA;MACAJ,IAAA,EAAAK,OAAA;MACAH,OAAA;IACA;EACA;EACAI,IAAA,WAAAA,KAAA;IACA,IAAAC,EAAA,GAAAb,IAAA;IACA;MACAc,GAAA;MACAC,MAAA,EAAAC,IAAA,CAAAC,MAAA;MACAC,iBAAA,yBAAAC,MAAA,CAAAN,EAAA;MACAO,cAAA,sBAAAD,MAAA,CAAAN,EAAA;MACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACAQ,aAAA;QACA;AACA;AACA;AACA;AACA;QACAC,MAAA;QACA;AACA;AACA;AACA;AACA;QACAC,KAAA;QACA;AACA;AACA;AACA;QACAC,IAAA;UACA;AACA;AACA;AACA;AACA;UACAC,IAAA;UACA;AACA;AACA;AACA;UACAC,QAAA;UACA;AACA;AACA;AACA;AACA;UACAC,KAAA;UACA;AACA;AACA;AACA;AACA;UACAC,MAAA;QACA;QACA;AACA;AACA;AACA;QACAC,IAAA;UACA;AACA;AACA;AACA;AACA;UACAJ,IAAA;UACA;AACA;AACA;AACA;AACA;UACAK,MAAA;UACA;AACA;AACA;AACA;AACA;UACAH,KAAA;UACA;AACA;AACA;AACA;AACA;UACAI,QAAA;QACA;QACA;AACA;AACA;AACA;QACAC,IAAA;UACA;AACA;AACA;AACA;AACA;UACAP,IAAA;UACA;AACA;AACA;AACA;AACA;UACAQ,GAAA;UACA;AACA;AACA;AACA;AACA;UACAC,KAAA;UACA;AACA;AACA;AACA;AACA;UACAC,MAAA;QACA;QACA;AACA;AACA;AACA;QACAC,IAAA;UACA;AACA;AACA;AACA;AACA;UACAF,KAAA;UACA;AACA;AACA;AACA;AACA;UACAP,KAAA;UACA;AACA;AACA;AACA;AACA;UACAU,UAAA;UACA;AACA;AACA;AACA;AACA;UACAX,QAAA;UACA;AACA;AACA;AACA;AACA;UACAE,MAAA;QACA;QACA;AACA;AACA;AACA;AACA;QACAU,QAAA;QACA;AACA;AACA;AACA;AACA;AACA;QACAC,CAAA;QACA;AACA;AACA;AACA;AACA;QACAC,SAAA;QACA;AACA;AACA;AACA;AACA;QACAC,QAAA;MACA;MACA;AACA;AACA;AACA;AACA;MACAC,QAAA;MACA;AACA;AACA;AACA;AACA;MACAC,cAAA;MACA;AACA;AACA;AACA;MACAC,aAAA;MAEAC,YAAA;IACA;EACA;EACAC,KAAA;IACAzC,MAAA,WAAAA,OAAA;MACA,IAAA0C,QAAA,QAAAA,QAAA;MAEAA,QAAA;IACA;EACA;EACAC,OAAA;IACAC,wBAAA,WAAAA,yBAAA;MACA,IAAAF,QAAA,QAAAA,QAAA;MAEAA,QAAA;IACA;IACAG,QAAA,WAAAA,SAAA;MACA,IAAAH,QAAA,QAAAA,QAAA;MAEAA,QAAA;IACA;IACAA,QAAA,WAAAA,SAAA;MAAA,IAAAI,KAAA;MAAA,OAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAAC,QAAA;QAAA,IAAAC,WAAA,EAAAC,iBAAA,EAAAC,aAAA,EAAAC,eAAA;QAAA,OAAAN,mBAAA,GAAAO,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GA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"}]}