{"remainingRequest":"F:\\githubpagetest\\chaoxing\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\githubpagetest\\chaoxing\\node_modules\\@jiaminghi\\data-view\\lib\\components\\scrollRankingBoard\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\githubpagetest\\chaoxing\\node_modules\\@jiaminghi\\data-view\\lib\\components\\scrollRankingBoard\\src\\main.vue","mtime":1696499855982},{"path":"F:\\githubpagetest\\chaoxing\\node_modules\\babel-loader\\lib\\index.js","mtime":1696499874028},{"path":"F:\\githubpagetest\\chaoxing\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1696499873500},{"path":"F:\\githubpagetest\\chaoxing\\node_modules\\vue-loader\\lib\\index.js","mtime":1696499870262}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBhdXRvUmVzaXplIGZyb20gJy4uLy4uLy4uL21peGluL2F1dG9SZXNpemUnCgppbXBvcnQgeyBkZWVwTWVyZ2UgfSBmcm9tICdAamlhbWluZ2hpL2NoYXJ0cy9saWIvdXRpbC9pbmRleCcKCmltcG9ydCB7IGRlZXBDbG9uZSB9IGZyb20gJ0BqaWFtaW5naGkvYy1yZW5kZXIvbGliL3BsdWdpbi91dGlsJwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdEdlNjcm9sbFJhbmtpbmdCb2FyZCcsCiAgbWl4aW5zOiBbYXV0b1Jlc2l6ZV0sCiAgcHJvcHM6IHsKICAgIGNvbmZpZzogewogICAgICB0eXBlOiBPYmplY3QsCiAgICAgIGRlZmF1bHQ6ICgpID0+ICh7fSkKICAgIH0KICB9LAogIGRhdGEgKCkgewogICAgcmV0dXJuIHsKICAgICAgcmVmOiAnc2Nyb2xsLXJhbmtpbmctYm9hcmQnLAoKICAgICAgZGVmYXVsdENvbmZpZzogewogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBCb2FyZCBkYXRhCiAgICAgICAgICogQHR5cGUge0FycmF5PE9iamVjdD59CiAgICAgICAgICogQGRlZmF1bHQgZGF0YSA9IFtdCiAgICAgICAgICovCiAgICAgICAgZGF0YTogW10sCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIFJvdyBudW0KICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfQogICAgICAgICAqIEBkZWZhdWx0IHJvd051bSA9IDUKICAgICAgICAgKi8KICAgICAgICByb3dOdW06IDUsCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNjcm9sbCB3YWl0IHRpbWUKICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfQogICAgICAgICAqIEBkZWZhdWx0IHdhaXRUaW1lID0gMjAwMAogICAgICAgICAqLwogICAgICAgIHdhaXRUaW1lOiAyMDAwLAogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBDYXJvdXNlbCB0eXBlCiAgICAgICAgICogQHR5cGUge1N0cmluZ30KICAgICAgICAgKiBAZGVmYXVsdCBjYXJvdXNlbCA9ICdzaW5nbGUnCiAgICAgICAgICogQGV4YW1wbGUgY2Fyb3VzZWwgPSAnc2luZ2xlJyB8ICdwYWdlJwogICAgICAgICAqLwogICAgICAgIGNhcm91c2VsOiAnc2luZ2xlJywKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzY3JpcHRpb24gVmFsdWUgdW5pdAogICAgICAgICAqIEB0eXBlIHtTdHJpbmd9CiAgICAgICAgICogQGRlZmF1bHQgdW5pdCA9ICcnCiAgICAgICAgICogQGV4YW1wbGUgdW5pdCA9ICd0b24nCiAgICAgICAgICovCiAgICAgICAgdW5pdDogJycsCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIEF1dG8gc29ydCBieSB2YWx1ZQogICAgICAgICAqIEB0eXBlIHtCb29sZWFufQogICAgICAgICAqIEBkZWZhdWx0IHNvcnQgPSB0cnVlCiAgICAgICAgICovCiAgICAgICAgc29ydDogdHJ1ZSwKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzY3JpcHRpb24gVmFsdWUgZm9ybWF0dGVyCiAgICAgICAgICogQHR5cGUge0Z1bmN0aW9ufQogICAgICAgICAqIEBkZWZhdWx0IHZhbHVlRm9ybWF0dGVyID0gbnVsbAogICAgICAgICAqLwogICAgICAgIHZhbHVlRm9ybWF0dGVyOiBudWxsCiAgICAgIH0sCgogICAgICBtZXJnZWRDb25maWc6IG51bGwsCgogICAgICByb3dzRGF0YTogW10sCgogICAgICByb3dzOiBbXSwKCiAgICAgIGhlaWdodHM6IFtdLAoKICAgICAgYW5pbWF0aW9uSW5kZXg6IDAsCgogICAgICBhbmltYXRpb25IYW5kbGVyOiAnJywKCiAgICAgIHVwZGF0ZXI6IDAKICAgIH0KICB9LAogIHdhdGNoOiB7CiAgICBjb25maWcgKCkgewogICAgICBjb25zdCB7IHN0b3BBbmltYXRpb24sIGNhbGNEYXRhIH0gPSB0aGlzCgogICAgICBzdG9wQW5pbWF0aW9uKCkKCiAgICAgIGNhbGNEYXRhKCkKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIGFmdGVyQXV0b1Jlc2l6ZU1peGluSW5pdCAoKSB7CiAgICAgIGNvbnN0IHsgY2FsY0RhdGEgfSA9IHRoaXMKCiAgICAgIGNhbGNEYXRhKCkKICAgIH0sCiAgICBvblJlc2l6ZSAoKSB7CiAgICAgIGNvbnN0IHsgbWVyZ2VkQ29uZmlnLCBjYWxjSGVpZ2h0cyB9ID0gdGhpcwoKICAgICAgaWYgKCFtZXJnZWRDb25maWcpIHJldHVybgoKICAgICAgY2FsY0hlaWdodHModHJ1ZSkKICAgIH0sCiAgICBjYWxjRGF0YSAoKSB7CiAgICAgIGNvbnN0IHsgbWVyZ2VDb25maWcsIGNhbGNSb3dzRGF0YSB9ID0gdGhpcwoKICAgICAgbWVyZ2VDb25maWcoKQoKICAgICAgY2FsY1Jvd3NEYXRhKCkKCiAgICAgIGNvbnN0IHsgY2FsY0hlaWdodHMgfSA9IHRoaXMKCiAgICAgIGNhbGNIZWlnaHRzKCkKCiAgICAgIGNvbnN0IHsgYW5pbWF0aW9uIH0gPSB0aGlzCgogICAgICBhbmltYXRpb24odHJ1ZSkKICAgIH0sCiAgICBtZXJnZUNvbmZpZyAoKSB7CiAgICAgIGxldCB7IGNvbmZpZywgZGVmYXVsdENvbmZpZyB9ID0gdGhpcwoKICAgICAgdGhpcy5tZXJnZWRDb25maWcgPSBkZWVwTWVyZ2UoZGVlcENsb25lKGRlZmF1bHRDb25maWcsIHRydWUpLCBjb25maWcgfHwge30pCiAgICB9LAogICAgY2FsY1Jvd3NEYXRhICgpIHsKICAgICAgbGV0IHsgZGF0YSwgcm93TnVtLCBzb3J0IH0gPSB0aGlzLm1lcmdlZENvbmZpZwoKICAgICAgc29ydCAmJiBkYXRhLnNvcnQoKHsgdmFsdWU6IGEgfSwgeyB2YWx1ZTogYiB9KSA9PiB7CiAgICAgICAgaWYgKGEgPiBiKSByZXR1cm4gLTEKICAgICAgICBpZiAoYSA8IGIpIHJldHVybiAxCiAgICAgICAgaWYgKGEgPT09IGIpIHJldHVybiAwCiAgICAgIH0pCgogICAgICBjb25zdCB2YWx1ZSA9IGRhdGEubWFwKCh7IHZhbHVlIH0pID0+IHZhbHVlKQogICAgICAKICAgICAgY29uc3QgbWluID0gTWF0aC5taW4oLi4udmFsdWUpIHx8IDAKCiAgICAgIC8vIGFicyBvZiBtaW4KICAgICAgY29uc3QgbWluQWJzID0gTWF0aC5hYnMobWluKQoKICAgICAgY29uc3QgbWF4ID0gTWF0aC5tYXgoLi4udmFsdWUpIHx8IDAKCiAgICAgIC8vIGFicyBvZiBtYXgKICAgICAgY29uc3QgbWF4QWJzID0gTWF0aC5hYnMobWF4KQoKICAgICAgY29uc3QgdG90YWwgPSBtYXggKyBtaW5BYnMKCiAgICAgIGRhdGEgPSBkYXRhLm1hcCgocm93LCBpKSA9PiAoeyAuLi5yb3csIHJhbmtpbmc6IGkgKyAxLCBwZXJjZW50OiAocm93LnZhbHVlICsgbWluQWJzKSAvIHRvdGFsICogMTAwIH0pKQoKICAgICAgY29uc3Qgcm93TGVuZ3RoID0gZGF0YS5sZW5ndGgKCiAgICAgIGlmIChyb3dMZW5ndGggPiByb3dOdW0gJiYgcm93TGVuZ3RoIDwgMiAqIHJvd051bSkgewogICAgICAgIGRhdGEgPSBbLi4uZGF0YSwgLi4uZGF0YV0KICAgICAgfQoKICAgICAgZGF0YSA9IGRhdGEubWFwKChkLCBpKSA9PiAoeyAuLi5kLCBzY3JvbGw6IGkgfSkpCgogICAgICB0aGlzLnJvd3NEYXRhID0gZGF0YQogICAgICB0aGlzLnJvd3MgPSBkYXRhCiAgICB9LAogICAgY2FsY0hlaWdodHMgKG9ucmVzaXplID0gZmFsc2UpIHsKICAgICAgY29uc3QgeyBoZWlnaHQsIG1lcmdlZENvbmZpZyB9ID0gdGhpcwoKICAgICAgY29uc3QgeyByb3dOdW0sIGRhdGEgfSA9IG1lcmdlZENvbmZpZwoKICAgICAgY29uc3QgYXZnSGVpZ2h0ID0gaGVpZ2h0IC8gcm93TnVtCgogICAgICB0aGlzLmF2Z0hlaWdodCA9IGF2Z0hlaWdodAoKICAgICAgaWYgKCFvbnJlc2l6ZSkgdGhpcy5oZWlnaHRzID0gbmV3IEFycmF5KGRhdGEubGVuZ3RoKS5maWxsKGF2Z0hlaWdodCkKICAgIH0sCiAgICBhc3luYyBhbmltYXRpb24gKHN0YXJ0ID0gZmFsc2UpIHsKICAgICAgbGV0IHsgYXZnSGVpZ2h0LCBhbmltYXRpb25JbmRleCwgbWVyZ2VkQ29uZmlnLCByb3dzRGF0YSwgYW5pbWF0aW9uLCB1cGRhdGVyIH0gPSB0aGlzCgogICAgICBjb25zdCB7IHdhaXRUaW1lLCBjYXJvdXNlbCwgcm93TnVtIH0gPSBtZXJnZWRDb25maWcKCiAgICAgIGNvbnN0IHJvd0xlbmd0aCA9IHJvd3NEYXRhLmxlbmd0aAoKICAgICAgaWYgKHJvd051bSA+PSByb3dMZW5ndGgpIHJldHVybgoKICAgICAgaWYgKHN0YXJ0KSB7CiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIHdhaXRUaW1lKSkKICAgICAgICBpZiAodXBkYXRlciAhPT0gdGhpcy51cGRhdGVyKSByZXR1cm4KICAgICAgfQoKICAgICAgY29uc3QgYW5pbWF0aW9uTnVtID0gY2Fyb3VzZWwgPT09ICdzaW5nbGUnID8gMSA6IHJvd051bQoKICAgICAgbGV0IHJvd3MgPSByb3dzRGF0YS5zbGljZShhbmltYXRpb25JbmRleCkKICAgICAgcm93cy5wdXNoKC4uLnJvd3NEYXRhLnNsaWNlKDAsIGFuaW1hdGlvbkluZGV4KSkKCiAgICAgIHRoaXMucm93cyA9IHJvd3Muc2xpY2UoMCwgcm93TnVtICsgMSkKICAgICAgdGhpcy5oZWlnaHRzID0gbmV3IEFycmF5KHJvd0xlbmd0aCkuZmlsbChhdmdIZWlnaHQpCgogICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMzAwKSkKICAgICAgaWYgKHVwZGF0ZXIgIT09IHRoaXMudXBkYXRlcikgcmV0dXJuCgogICAgICB0aGlzLmhlaWdodHMuc3BsaWNlKDAsIGFuaW1hdGlvbk51bSwgLi4ubmV3IEFycmF5KGFuaW1hdGlvbk51bSkuZmlsbCgwKSkKCiAgICAgIGFuaW1hdGlvbkluZGV4ICs9IGFuaW1hdGlvbk51bQoKICAgICAgY29uc3QgYmFjayA9IGFuaW1hdGlvbkluZGV4IC0gcm93TGVuZ3RoCiAgICAgIGlmIChiYWNrID49IDApIGFuaW1hdGlvbkluZGV4ID0gYmFjawoKICAgICAgdGhpcy5hbmltYXRpb25JbmRleCA9IGFuaW1hdGlvbkluZGV4CiAgICAgIHRoaXMuYW5pbWF0aW9uSGFuZGxlciA9IHNldFRpbWVvdXQoYW5pbWF0aW9uLCB3YWl0VGltZSAtIDMwMCkKICAgIH0sCiAgICBzdG9wQW5pbWF0aW9uICgpIHsKICAgICAgY29uc3QgeyBhbmltYXRpb25IYW5kbGVyLCB1cGRhdGVyIH0gPSB0aGlzCgogICAgICB0aGlzLnVwZGF0ZXIgPSAodXBkYXRlciArIDEpICUgOTk5OTk5CgogICAgICBpZiAoIWFuaW1hdGlvbkhhbmRsZXIpIHJldHVybgoKICAgICAgY2xlYXJUaW1lb3V0KGFuaW1hdGlvbkhhbmRsZXIpCiAgICB9LAogIH0sCiAgZGVzdHJveWVkICgpIHsKICAgIGNvbnN0IHsgc3RvcEFuaW1hdGlvbiB9ID0gdGhpcwoKICAgIHN0b3BBbmltYXRpb24oKQogIH0KfQo="},null]}